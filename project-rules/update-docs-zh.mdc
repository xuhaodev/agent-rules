# 更新文档

您将生成具有具体文件引用和灵活格式的 LLM 优化文档。

## 您的任务

创建允许人类和 LLM 能够：
- **理解项目目的** - 项目的作用和原因
- **获取架构概述** - 系统如何组织
- **在所有平台上构建** - 带有文件引用的构建说明
- **添加功能/子系统** - 遵循既定模式和示例
- **调试应用程序** - 使用特定文件位置排除问题
- **测试和添加测试** - 运行现有测试并创建新测试
- **部署和分发** - 打包和部署软件

## 必需的文档结构

每个文档必须包括：
1. **时间戳标头** - 带有最后更新时间戳的隐藏注释
2. **简要概述** (最多 2-3 段)
3. **关键文件和示例** - 每个主要主题的具体文件引用
4. **常见工作流程** - 带有文件位置的实用指导
5. **参考信息** - 带有文件路径的快速查找表

## 时间戳格式

每个生成的文件必须以以下内容开始：
```
<!-- Generated: YYYY-MM-DD HH:MM:SS UTC -->
```

## 流程

您将：
1. **系统性地分析代码库** 跨 7 个关键领域（合并开发+模式）
2. **在 `docs/*.md` 中创建或更新文档** 带有具体文件引用
3. **将最终文档综合** 到最小的、LLM 友好的 README.md 中
4. **消除所有重复** 跨文件

## 分析方法论

对于每个领域，代理应该：
1. **检查关键文件**: 查找构建配置、测试文件、部署脚本、主要源文件
2. **提取文件引用**: 注意特定文件、行号和示例
3. **识别模式**: 查找重复结构、命名约定、常见工作流程
4. **使内容 LLM 友好**: 令牌高效、引用丰富、实用示例

## 特定文件要求

并行发出以下任务调用：

**项目概述** (`docs/project-overview.md`):
结构:
- 概述: 项目是什么、核心目的、关键价值主张（2-3 段）
- 关键文件: 主要入口点和核心配置文件
- 技术栈: 带有特定文件示例的核心技术
- 平台支持: 带有平台特定文件位置的要求

**架构** (`docs/architecture.md`):
结构:
- 概述: 高级系统组织（2-3 段）
- 组件图: 主要组件及其源文件位置
- 关键文件: 带有简要描述的核心头文件和实现
- 数据流: 信息如何流动，带有特定函数/文件引用

**构建系统** (`docs/build-system.md`):
结构:
- 概述: 构建系统，带有主要构建配置的文件引用
- 构建工作流程: 带有特定命令和配置文件的常见任务
- 平台设置: 带有文件路径的平台特定要求
- 参考: 构建目标、预设和故障排除，带有文件位置

**测试** (`docs/testing.md`):
结构:
- 概述: 测试方法，带有测试文件位置
- 测试类型: 不同测试类别，带有特定文件示例
- 运行测试: 带有文件路径和预期输出的命令
- 参考: 测试文件组织和构建系统测试目标

**开发** (`docs/development.md`):
结构:
- 概述: 开发环境、代码风格、模式（如果存在，与旧的 patterns.md 合并）
- 代码风格: 带有特定文件示例的约定（显示代码库中的实际代码）
- 常见模式: 带有文件引用和代码库示例的实现模式
- 工作流程: 带有具体文件位置和示例的开发任务
- 参考: 文件组织、命名约定、带有特定文件的常见问题

**部署** (`docs/deployment.md`):
结构:
- 概述: 打包和分发，带有脚本引用
- 包类型: 不同包，带有构建目标和输出位置
- 平台部署: 带有文件路径的平台特定打包
- 参考: 部署脚本、输出位置、服务器配置

**文件目录** (`docs/files.md`):
结构:
- 概述: 带有描述和关系的综合文件目录（2-3 段）
- 核心源文件: 带有目的描述的主要应用程序逻辑
- 平台实现: 带有接口映射的平台特定代码
- 构建系统: 构建配置和辅助模块
- 配置: 资源、脚本、配置 - 支持文件及其角色
- 参考: 文件组织模式、命名约定、依赖关系

## 关键要求

### LLM 优化格式
- **令牌高效**: 避免冗余解释，专注于基本信息
- **具体文件引用**: 始终包括特定文件路径，有助时包括行号
- **灵活格式**: 使用子节、代码块、示例而非严格的逐步说明
- **模式示例**: 显示代码库中的实际代码，而非通用示例

### 无重复
- 每条信息在恰好一个文件中出现
- 构建信息仅在 build-system.md 中
- 代码风格和模式仅在 development.md 中
- 部署信息仅在 deployment.md 中
- 使用交叉引用: "参见 [docs/filename.md](docs/filename.md)"

### 文件引用格式
始终包括特定文件引用：
```
**核心系统** - 在 src/core.h (第 15-45 行) 中的核心实现，平台后端在 src/platform/

**构建配置** - 主构建文件（第 67-89 行），配置文件

**模块管理** - 在 src/module.h 中的接口，在 src/module.c 中的实现（key_function 在第 134 行）
```

### 实用示例
使用代码库中的实际代码：
```c
// 来自 src/example.h:23-27
typedef struct {
    bool active;
    void *data;
    int count;
} ExampleState;
```

## 最终步骤

所有任务完成后：

1. **读取所有 `docs/*.md` 文件** 并创建 README.md，包含：
   - 项目描述（最多 2-3 句）
   - 关键入口点和核心配置文件
   - 快速构建命令
   - 文档链接，简要描述 LLM 会发现有用的内容
   - 总计保持在 50 行以下

2. **重复检查**: 扫描所有文件并删除任何重复信息

3. **文件引用检查**: 确保所有文件路径准确且有帮助

## 代理说明

每个代理必须：
1. **读取现有文件**（如果存在）以了解当前内容
2. **系统性地分析相关代码库文件**
3. **在整个分析中提取特定文件引用**：
   - 注意重要的头文件、源文件、配置文件
   - 在有帮助时包括关键函数/节的行号
   - 引用代码库中的实际代码示例
4. **创建 LLM 友好的内容**：
   - 令牌高效的写作（无冗余解释）
   - 贯穿具体文件路径和示例
   - 灵活格式（子节、代码块、实用指导）
   - 专注于 LLM 理解和使用代码所需的内容
5. **包含实用工作流程**，带有特定文件引用
6. **创建参考节**，带有文件位置和行号
7. **用当前 UTC 时间更新时间戳**
8. **读取生成的文件**并修改以确保准确性和完整性

**成功标准**: 每个文件应该是一个实用参考，帮助 LLM 快速理解代码库并找到特定任务的正确文件。

**development.md 的特别说明**: 将旧 development.md 和 patterns.md（如果存在）的内容合并到一个带有实现模式的综合开发指南中。

协调代理必须：
1. 等待所有代理完成
2. 读取所有生成的文件
3. 删除找到的任何重复
4. 创建带有关键文件引用的最小 LLM 优化 README.md
5. **用当前 UTC 时间更新 README.md 时间戳**
6. 如果存在 docs/patterns.md，删除它，因为它已合并到 development.md 中

## 文件代理说明

文件代理应创建一个最小的、令牌高效的文件目录：

1. **发现文件**: 使用 Glob 和 LS 查找所有源文件、配置和构建文件
2. **按功能分组**: 将文件组织成逻辑类别（核心、平台、构建、测试、配置）
3. **简要描述**: 每个重要文件一行，描述其主要目的
4. **关键入口点**: 突出主要文件、构建配置和重要头文件
5. **依赖关系**: 注意文件组之间的主要关系

**格式**: 带有文件路径和单句描述的简洁列表。专注于帮助 LLM 快速定位功能，而非全面文档。

**成功标准**: LLM 可以快速找到"主入口点在哪里"、"哪些文件处理 X"、"关键头文件是什么"，而无需阅读详细描述。
